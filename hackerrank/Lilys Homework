import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
import javafx.util.Pair;
class SortByElementsAsc implements Comparator<Pair<Integer,Integer>>
{
    public int compare(Pair<Integer,Integer> p1,Pair<Integer,Integer> p2)
    {
        if(p1.getKey()>p2.getKey())
         return -1;
        else if(p1.getKey()==p2.getKey())
         return 0;
        else
         return 1;
    }
} 
class SortByElementsDes implements Comparator<Pair<Integer,Integer>>
{
    public int compare(Pair<Integer,Integer> p1,Pair<Integer,Integer> p2)
    {
        if(p1.getKey()<p2.getKey())
         return -1;
        else if(p1.getKey()==p2.getKey())
         return 0;
        else
         return 1;
    }
} 
public class Solution {

    // Complete the lilysHomework function below.
    static int lilysHomework(int[] arr) {
        ArrayList<Pair<Integer,Integer>> a=new ArrayList<Pair<Integer,Integer>>();
        int n=arr.length;
        for(int i=0;i<n;i++)
        {
            a.add(new Pair<Integer,Integer>(arr[i],i));
        }
        a.sort(new SortByElementsAsc());
        boolean visited[]=new boolean[n];
        Arrays.fill(visited,false);
        int ans1=0;
        for(int i=0;i<n;i++)
        {
            if(visited[i] || a.get(i).getValue()==i)
             continue;
            
                int cycle=0;
                int j=i;
                while(!visited[j])
                {
                    visited[j]=true;
                    j=a.get(j).getValue();
                    cycle++;
                }
                if(cycle>0)
                 ans1+=(cycle-1);
        }
        a.sort(new SortByElementsDes());
        boolean visited1[]=new boolean[n];
        Arrays.fill(visited,false);
        int ans2=0;
        for(int i=0;i<n;i++)
        {
            if(visited1[i] || a.get(i).getValue()==i)
             continue;
            
                int cycle=0;
                int j=i;
                while(!visited1[j])
                {
                    visited1[j]=true;
                    j=a.get(j).getValue();
                    cycle++;
                }
                if(cycle>0)
                 ans2+=(cycle-1);
        }
     return Math.min(ans1,ans2);

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] arr = new int[n];

        String[] arrItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int arrItem = Integer.parseInt(arrItems[i]);
            arr[i] = arrItem;
        }

        int result = lilysHomework(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
